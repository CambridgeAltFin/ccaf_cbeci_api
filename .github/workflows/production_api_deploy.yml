name: Cbeci API production server deploy
on: 
  push:
    branches:
      - master
    paths-ignore:
      - 'frontend/**'
jobs:
  deploy:
    environment:
      name: production
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: CLI commands for deploy
      uses: appleboy/ssh-action@master
      env:
        SHA: ${{ github.sha }}
      with:
        host: ${{ secrets.PRODUCTION_SERVER_HOST }}
        username: cbeci
        port: 22
        envs: SHA
        script_stop: true
        key:  ${{ secrets.CBECI_USER_KEY }}
        script: |
          export PATH="/home/cbeci/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"
          source $HOME/.poetry/env
          cd ${{ secrets.PRODUCTION_API_PROJECT_PATH }}
          rm -rf releases/$SHA
          mkdir releases/$SHA
          cd releases/$SHA
          ssh-agent bash -c 'ssh-add /home/cbeci/.ssh/id_rsa_mining_energy_consumption; git clone git@github.com:dektox/mining_energy_consumption.git .'
          git checkout $SHA
          ln -s ${{ secrets.PRODUCTION_API_PROJECT_PATH }}/.env .env
          ln -s ${{ secrets.PRODUCTION_API_PROJECT_PATH }}/CONFIG.yml CONFIG.yml
          ln -s ${{ secrets.PRODUCTION_API_PROJECT_PATH }}/service-account-cert.ccaf-afea.json storage/firebase/service-account-cert.ccaf-afea.json
          poetry install
          cd api
          poetry run pytest tests
          rm -rf ${{ secrets.PRODUCTION_API_PROJECT_PATH }}/actual
          ln -s ${{ secrets.PRODUCTION_API_PROJECT_PATH }}/releases/$SHA ${{ secrets.PRODUCTION_API_PROJECT_PATH }}/actual
          sudo /usr/sbin/service cbeci_api restart
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
    - name: Set outputs
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
    - name: Gcloud deploy
      run: |
        export PROJECT=ccaf-afea
        export FAMILY=cbeci-prod-images
        export ZONE=europe-west2-b
        export STORAGE_LOCATION=europe-west2
        export SOURCE_DISK=cbeci-production
        export MACHINE_IMAGE=cbeci-prod-image-${{ steps.vars.outputs.sha_short }}
        export INSTANCE_TEMPLATE=cbeci-prod-template-${{ steps.vars.outputs.sha_short }}
        export INSTANCE_GROUP=cbeci-prod-group
        
        gcloud compute instances stop $SOURCE_DISK --project=$PROJECT --zone=$ZONE
        gcloud compute images create $MACHINE_IMAGE --project=$PROJECT --family=$FAMILY --source-disk=$SOURCE_DISK --source-disk-zone=$ZONE --labels=env=prod,cbeci-prod-image=1 --storage-location=$STORAGE_LOCATION --force
        gcloud compute instances start $SOURCE_DISK --project=$PROJECT --zone=$ZONE
        gcloud --quiet beta compute --project=$PROJECT instance-templates create $INSTANCE_TEMPLATE --machine-type=e2-medium --network=projects/ccaf-afea/global/networks/default --network-tier=PREMIUM --metadata="env=prod,cbeci-prod-web=1,startup-script=crontab -u cbeci -r" --maintenance-policy=MIGRATE --service-account=756071129183-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --tags=http-server,https-server --image=$MACHINE_IMAGE --image-project=$PROJECT --boot-disk-size=32GB --boot-disk-type=pd-balanced --boot-disk-device-name=$INSTANCE_TEMPLATE --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any
        gcloud compute instance-groups managed set-instance-template $INSTANCE_GROUP --project=$PROJECT --template=$INSTANCE_TEMPLATE --zone=$ZONE
        gcloud beta compute instance-groups managed rolling-action start-update $INSTANCE_GROUP --project=$PROJECT --zone=$ZONE --version=template=$INSTANCE_TEMPLATE --max-unavailable=0
    - name: Remove failed release
      uses: appleboy/ssh-action@master
      if: failure()
      env:
        SHA: ${{ github.sha }}
      with:
        host: ${{ secrets.PRODUCTION_SERVER_HOST }}
        username: atlas
        port: 22
        envs: SHA
        script_stop: true
        key: ${{ secrets.CBECI_USER_KEY }}
        script: |
          rm -rf ${{ secrets.PRODUCTION_API_PROJECT_PATH }}/releases/$SHA
